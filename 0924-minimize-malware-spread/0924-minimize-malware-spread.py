class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        #change the adjacency matric rep to adjacency list rep 
        graph_ = defaultdict(list)
        for i in range(len(graph)):
            for j in range(len(graph)):
                if i != j and graph[i][j]:
                    graph_[i].append(j)
                  
        
        #color each componets 
        colors = {}
        def dfs(node,color):
            colors[node] = color
            for nb in graph_[node]:
                if nb not in colors :
                    dfs(nb,color)
        
        color = 0
        for node in initial:
            if node not in colors:
                dfs(node,color)
                color += 1

        #count the size of each color
        size = Counter(colors.values())

        #find unique colors
        color_count = Counter()
        for node in initial:
            color_count[colors[node]] += 1

        ans = float("inf")
        for node in initial:
            c = colors[node]
            if color_count[c] == 1:
                if ans == float('inf'):
                    ans = node
                elif size[c] > size[colors[ans]]:
                    ans = node
                elif size[c] == size[colors[ans]] and  node < ans:
                    ans = node
        return ans if ans != float('inf') else min(initial)



            
